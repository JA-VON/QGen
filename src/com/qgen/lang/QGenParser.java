
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package com.qgen.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class QGenParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public QGenParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public QGenParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QGenParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\010\000\002\003" +
    "\007\000\002\004\007\000\002\005\005\000\002\015\003" +
    "\000\002\015\003\000\002\014\004\000\002\014\003\000" +
    "\002\006\012\000\002\007\007\000\002\016\004\000\002" +
    "\016\003\000\002\010\007\000\002\017\004\000\002\017" +
    "\003\000\002\013\003\000\002\013\003\000\002\011\003" +
    "\000\002\012\005\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\005\006\001\002\000\004\002\070\001" +
    "\002\000\004\006\014\001\002\000\004\016\007\001\002" +
    "\000\004\014\010\001\002\000\004\021\011\001\002\000" +
    "\004\015\012\001\002\000\004\006\uffff\001\002\000\004" +
    "\007\022\001\002\000\004\016\015\001\002\000\004\014" +
    "\016\001\002\000\004\021\017\001\002\000\004\015\020" +
    "\001\002\000\004\007\ufffe\001\002\000\006\004\025\011" +
    "\uffed\001\002\000\004\016\023\001\002\000\004\020\024" +
    "\001\002\000\006\004\ufffd\011\ufffd\001\002\000\004\012" +
    "\056\001\002\000\004\011\ufffb\001\002\000\006\004\025" +
    "\011\ufffc\001\002\000\006\004\ufff9\011\ufff9\001\002\000" +
    "\004\011\033\001\002\000\004\010\047\001\002\000\004" +
    "\016\034\001\002\000\004\014\035\001\002\000\006\017" +
    "\036\021\040\001\002\000\010\015\uffef\017\uffef\021\uffef" +
    "\001\002\000\010\015\ufff0\017\ufff0\021\ufff0\001\002\000" +
    "\010\015\ufff1\017\ufff1\021\ufff1\001\002\000\010\015\043" +
    "\017\036\021\040\001\002\000\010\015\ufff2\017\ufff2\021" +
    "\ufff2\001\002\000\004\010\ufff7\001\002\000\010\015\ufff3" +
    "\017\ufff3\021\ufff3\001\002\000\006\002\000\010\047\001" +
    "\002\000\006\002\ufff5\010\ufff5\001\002\000\004\016\050" +
    "\001\002\000\004\014\051\001\002\000\006\017\036\021" +
    "\040\001\002\000\010\015\053\017\036\021\040\001\002" +
    "\000\006\002\ufff4\010\ufff4\001\002\000\006\002\ufff6\010" +
    "\ufff6\001\002\000\006\004\ufffa\011\ufffa\001\002\000\004" +
    "\017\057\001\002\000\004\013\060\001\002\000\004\016" +
    "\061\001\002\000\004\014\062\001\002\000\004\017\063" +
    "\001\002\000\004\012\066\001\002\000\004\015\065\001" +
    "\002\000\006\004\ufff8\011\ufff8\001\002\000\004\013\067" +
    "\001\002\000\004\015\uffee\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\027\014\026\015\030\020\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\054\001\001" +
    "\000\002\001\001\000\004\007\031\001\001\000\006\010" +
    "\045\016\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\036\013\041\017\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\036" +
    "\013\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\036\013" +
    "\041\017\051\001\001\000\006\011\036\013\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QGenParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QGenParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QGenParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// No longer necessary
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " +
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		QGenLexer lexer;

		public QGenParser(QGenLexer l) {
                    super(l);
                    lexer = l;
                }

		public QGenParser(String file) throws FileNotFoundException {
	            this(new QGenLexer(new FileReader(file)));
		}

                public QGenParser(InputStream is) {
                    this(new QGenLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$QGenParser$actions {

          
  private final QGenParser parser;

  /** Constructor */
  CUP$QGenParser$actions(QGenParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$QGenParser$do_action_part00000000(
    int                        CUP$QGenParser$act_num,
    java_cup.runtime.lr_parser CUP$QGenParser$parser,
    java.util.Stack            CUP$QGenParser$stack,
    int                        CUP$QGenParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QGenParser$result;

      /* select the action based on the action number */
      switch (CUP$QGenParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		QGenProgram start_val = (QGenProgram)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		RESULT = start_val;
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QGenParser$parser.done_parsing();
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= titleExp typeExp countExp defExpLstE bodyExp ansExpLst 
            {
              QGenProgram RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).right;
		QGenTitleExp title = (QGenTitleExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)).right;
		QGenTypeExp type = (QGenTypeExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)).value;
		int countleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-3)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-3)).right;
		QGenCountExp count = (QGenCountExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-3)).value;
		int definitionsleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).left;
		int definitionsright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).right;
		ArrayList<QGenDefinitionExp> definitions = (ArrayList<QGenDefinitionExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		QGenBodyExp body = (QGenBodyExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		int answersleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int answersright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		ArrayList<QGenAnswerExp> answers = (ArrayList<QGenAnswerExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
        RESULT = new QGenProgram(title, type, count, definitions, body, answers);
    
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // titleExp ::= TITLE COLON LBRACE STRING RBRACE 
            {
              QGenTitleExp RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		 RESULT = new QGenTitleExp(title); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("titleExp",1, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // typeExp ::= TYPE COLON LBRACE STRING RBRACE 
            {
              QGenTypeExp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		 RESULT = new QGenTypeExp(type); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("typeExp",2, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // countExp ::= COUNT COLON INTEGER 
            {
              QGenCountExp RESULT =null;
		int countleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int countright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		Integer count = (Integer)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		 RESULT = new QGenCountExp(count); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("countExp",3, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defExpLstE ::= defExpLst 
            {
              ArrayList<QGenDefinitionExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		ArrayList<QGenDefinitionExp> lst = (ArrayList<QGenDefinitionExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("defExpLstE",11, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defExpLstE ::= empty 
            {
              ArrayList<QGenDefinitionExp> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("defExpLstE",11, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defExpLst ::= defExpLst defExp 
            {
              ArrayList<QGenDefinitionExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		ArrayList<QGenDefinitionExp> lst = (ArrayList<QGenDefinitionExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenDefinitionExp def = (QGenDefinitionExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
                lst.add(def);
                RESULT = lst; 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("defExpLst",10, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // defExpLst ::= defExp 
            {
              ArrayList<QGenDefinitionExp> RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenDefinitionExp def = (QGenDefinitionExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
                    RESULT = new ArrayList<>();
                    RESULT.add(def);
                
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("defExpLst",10, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defExp ::= DEF LPAREN VAR RPAREN COLON LBRACE funCall RBRACE 
            {
              QGenDefinitionExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-5)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		QGenFunctionCallExp fc = (QGenFunctionCallExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		
        RESULT = new QGenDefinitionExp(id,fc); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("defExp",4, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-7)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bodyExp ::= BODY COLON LBRACE expLst RBRACE 
            {
              QGenBodyExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		ArrayList<QGenExp> lst = (ArrayList<QGenExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		
            RESULT = new QGenBodyExp(lst); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("bodyExp",5, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ansExpLst ::= ansExpLst ansExp 
            {
              ArrayList<QGenAnswerExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		ArrayList<QGenAnswerExp> lst = (ArrayList<QGenAnswerExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		int ansleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int ansright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenAnswerExp ans = (QGenAnswerExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
            lst.add(ans);
            RESULT = lst;
            
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("ansExpLst",12, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ansExpLst ::= ansExp 
            {
              ArrayList<QGenAnswerExp> RESULT =null;
		int ansleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int ansright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenAnswerExp ans = (QGenAnswerExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add(ans);
            
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("ansExpLst",12, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ansExp ::= ANS COLON LBRACE expLst RBRACE 
            {
              QGenAnswerExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		ArrayList<QGenExp> lst = (ArrayList<QGenExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		
        RESULT = new QGenAnswerExp(lst); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("ansExp",6, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-4)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expLst ::= expLst exp 
            {
              ArrayList<QGenExp> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).right;
		ArrayList<QGenExp> lst = (ArrayList<QGenExp>)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenExp lit = (QGenExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
            lst.add(lit);
            RESULT = lst;
            
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("expLst",13, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-1)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expLst ::= exp 
            {
              ArrayList<QGenExp> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenExp lit = (QGenExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add(lit);
            
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("expLst",13, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= STRING 
            {
              QGenExp RESULT =null;
		int stringlitleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int stringlitright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		String stringlit = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
            RESULT = new QGenStringExp(stringlit); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= lookupExp 
            {
              QGenExp RESULT =null;
		int lookupleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int lookupright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		QGenLookupExp lookup = (QGenLookupExp)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		 RESULT = lookup; 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lookupExp ::= VAR 
            {
              QGenLookupExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.peek()).value;
		
            RESULT = new QGenLookupExp(id);
            
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("lookupExp",7, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funCall ::= VAR LPAREN RPAREN 
            {
              QGenFunctionCallExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)).value;
		 RESULT = new QGenFunctionCallExp(v); 
              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("funCall",8, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.elementAt(CUP$QGenParser$top-2)), ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // empty ::= 
            {
              Object RESULT =null;

              CUP$QGenParser$result = parser.getSymbolFactory().newSymbol("empty",14, ((java_cup.runtime.Symbol)CUP$QGenParser$stack.peek()), RESULT);
            }
          return CUP$QGenParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$QGenParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$QGenParser$do_action(
    int                        CUP$QGenParser$act_num,
    java_cup.runtime.lr_parser CUP$QGenParser$parser,
    java.util.Stack            CUP$QGenParser$stack,
    int                        CUP$QGenParser$top)
    throws java.lang.Exception
    {
              return CUP$QGenParser$do_action_part00000000(
                               CUP$QGenParser$act_num,
                               CUP$QGenParser$parser,
                               CUP$QGenParser$stack,
                               CUP$QGenParser$top);
    }
}

}
